# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: entrypoint
  labels:
    app: default-init
data:
  entrypoint.sh: |
    #!/usr/bin/env bash

    set -euo pipefail

    DEBIAN_FRONTEND=noninteractive
    ROOT_MOUNT_DIR="${ROOT_MOUNT_DIR:-/root}"

    echo "Installing dependencies"
    apt-get update
    apt-get install -y apt-transport-https curl gnupg

    echo "Installing gcloud SDK"
    export CLOUD_SDK_REPO="cloud-sdk"
    echo "deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    apt-get update
    apt-get install -y google-cloud-sdk

    echo "Disable logging of gcloud command"
    HOME=/tmp
    gcloud config set core/disable_file_logging True

    echo "Getting node metadata"
    NODE_NAME="$(curl -sS http://metadata.google.internal/computeMetadata/v1/instance/name -H 'Metadata-Flavor: Google')"
    ZONE="$(curl -sS http://metadata.google.internal/computeMetadata/v1/instance/zone -H 'Metadata-Flavor: Google' | awk -F  "/" '{print $4}')"

    echo "Setting up disks"
    DISK_NAME="build"

    if ! gcloud compute instances describe "$NODE_NAME" --zone "$ZONE" --format '(disks[].source)' | grep "$DISK_NAME" > /dev/null; then
        z=${ZONE: -1}
        i=1
        echo "Testing disk $DISK_NAME$i$z"
        while gcloud compute disks describe "$DISK_NAME$i$z" --zone "$ZONE"  | grep "^users" > /dev/null ;
        do
            i=$(( $i + 1 ))
            echo "Testing disk $DISK_NAME$i$z"
        done
        echo "Selected disk $DISK_NAME$i$z"

        echo "Attaching $DISK_NAME to $NODE_NAME"
        gcloud compute instances attach-disk "$NODE_NAME" --device-name=sdb --disk "$DISK_NAME$i$z" --zone "$ZONE"
    else
        echo "$DISK_NAME is already attached to $NODE_NAME"
    fi
    
    # We use chroot to run the following commands in the host root (mounted as the /root volume in the container)
    echo "Mounting disks"
    [ -d "${ROOT_MOUNT_DIR}/mnt/disks/sdb" ] && echo "Directory ${ROOT_MOUNT_DIR}/mnt/disks/sdb exists." || mkdir -p ${ROOT_MOUNT_DIR}/mnt/disks/sdb
    chroot "${ROOT_MOUNT_DIR}" bash -c 'if grep -qs "/dev/sdb " /proc/mounts; then     echo "/dev/sdb already mounted." ; else     mount /dev/sdb /mnt/disks/sdb ; fi'
    chroot "${ROOT_MOUNT_DIR}" mount | grep /dev/sd

    # Remove taint from node
    apt-get update
    apt-get install -y ca-certificates curl
    apt-get install -y apt-transport-https
    curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
    echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
    apt-get update
    apt-get install -y kubectl
    if kubectl get no $NODE_NAME -o yaml | grep "special=bigger" 
    then
      kubectl taint nodes $NODE_NAME special-
      echo "Node $NODE_NAME untainted"
    else 
      echo "Node $NODE_NAME already untainted"
    fi

